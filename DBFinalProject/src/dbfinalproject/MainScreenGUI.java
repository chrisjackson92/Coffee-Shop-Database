/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbfinalproject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author chris
 */
public class MainScreenGUI extends javax.swing.JFrame {
    final String database_URL = "jdbc:derby://localhost:1527/dbCoffeeStoreData";
    /**
     * Creates new form MainScreenGUI
     */
    public MainScreenGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customerBtn = new javax.swing.JButton();
        jlblStatus = new javax.swing.JLabel();
        coffeeBtn = new javax.swing.JButton();
        ordersBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tableTxtBox = new javax.swing.JTextField();
        customerGUIBtn = new javax.swing.JButton();
        CoffeeGUIBtn = new javax.swing.JButton();
        ordersGUIBtn = new javax.swing.JButton();
        NewCustGUIBtn = new javax.swing.JButton();
        newOrdersGUIBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dbfinalproject/Dream Coffee Shop Logo Free Vector.jpg"))); // NOI18N

        jLabel2.setText("Dream Coffee");

        customerBtn.setText("Create Customer Table");
        customerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerBtnActionPerformed(evt);
            }
        });

        jlblStatus.setText(" ");

        coffeeBtn.setText("Create Coffee Table ");
        coffeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coffeeBtnActionPerformed(evt);
            }
        });

        ordersBtn.setText("Create Orders Table");
        ordersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset Table");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete Table");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Table Name:");

        customerGUIBtn.setText("Customer Page");
        customerGUIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerGUIBtnActionPerformed(evt);
            }
        });

        CoffeeGUIBtn.setText("Coffee Page");
        CoffeeGUIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoffeeGUIBtnActionPerformed(evt);
            }
        });

        ordersGUIBtn.setText("Customer Orders Page");
        ordersGUIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersGUIBtnActionPerformed(evt);
            }
        });

        NewCustGUIBtn.setText("New Customer Page");
        NewCustGUIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCustGUIBtnActionPerformed(evt);
            }
        });

        newOrdersGUIBtn.setText("New Order page");
        newOrdersGUIBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrdersGUIBtnActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Dream Coffee Co.\nEstablished since 2018, Dream Coffee has been dedicated to serving customers premium coffee. Our coffee is imported from other contries to bring you the highest quality and organic coffee beans ground to perfection.\n");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerBtn)
                                    .addComponent(coffeeBtn)
                                    .addComponent(ordersBtn)
                                    .addComponent(jlblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteBtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resetBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tableTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerGUIBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CoffeeGUIBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ordersGUIBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NewCustGUIBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newOrdersGUIBtn)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jlblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerBtn)
                    .addComponent(resetBtn)
                    .addComponent(jLabel3)
                    .addComponent(tableTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coffeeBtn)
                    .addComponent(deleteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ordersBtn)
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerGUIBtn)
                    .addComponent(CoffeeGUIBtn)
                    .addComponent(ordersGUIBtn)
                    .addComponent(NewCustGUIBtn)
                    .addComponent(newOrdersGUIBtn))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerBtnActionPerformed
        // TODO add your handling code here:
        try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("CREATE TABLE CUSTOMER "
                                                               + "("
                                                                 + "customer_number INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "first_name VARCHAR(25) not null,"
                                                                 + "last_name VARCHAR(25) not null,"
                                                                 + "street VARCHAR(25) not null,"
                                                                 + "city VARCHAR(25) not null,"
                                                                 + "state VARCHAR(2) not null,"
                                                                + "zip VARCHAR(5) not null,"
                                                                + "phone VARCHAR(10) not null,"
                                                                + "email VARCHAR(25),"
                                                                + "credit_limit DOUBLE not null DEFAULT 200.00"
                                                                 + ")");
        int a = stmt.executeUpdate();
            if (a>0){
                jlblStatus.setText("Table created");
            }
        stmt=connection.prepareStatement("INSERT INTO CUSTOMER (first_name, last_name, street, city, state, zip, phone) VALUES ('Jane', 'Smith', '345 Haywood St.', 'Winston', 'NC', '27101', '3369937594' )");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO CUSTOMER (first_name, last_name, street, city, state, zip, phone) VALUES ('Larry', 'Smith', '1001 S. Main St.', 'Winston', 'NC', '27101', '3369409474' )");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO CUSTOMER (first_name, last_name, street, city, state, zip, phone) VALUES ('John', 'Singleton', '249 Zip St.', 'Winston', 'NC', '27106', '3369275305' )");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO CUSTOMER (first_name, last_name, street, city, state, zip, phone) VALUES ('Mary', 'Jackson', '8495 Foust St.', 'Greensboro', 'NC', '27165', '3367840571' )");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO CUSTOMER (first_name, last_name, street, city, state, zip, phone) VALUES ('Terry', 'Jones', '789 Gilbert St.', 'Charlotte', 'NC', '27178', '7042347859' )");
        stmt.executeUpdate();
        jlblStatus.setText("Customer table created");
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_customerBtnActionPerformed

    private void coffeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coffeeBtnActionPerformed
        // TODO add your handling code here:
        try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("CREATE TABLE COFFEE "
                                                               + "("
                                                                 + "coffee_id INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "coffee_name VARCHAR(25) not null,"
                                                                 + "description VARCHAR(25) not null,"
                                                                 + "price DOUBLE not null,"
                                                                 + "num_in_stock INTEGER not null"
                                                                 + ")");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO COFFEE (coffee_name, description, price, num_in_stock) VALUES ('Mocha', 'Chocolate coffee', 2.99, 3)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO COFFEE (coffee_name, description, price, num_in_stock) VALUES ('Caramel Frap', 'Caramel coffe ext. cream', 3.99, 2)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO COFFEE (coffee_name, description, price, num_in_stock) VALUES ('House Blend', 'Regular', 2.00, 5)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO COFFEE (coffee_name, description, price, num_in_stock) VALUES ('Green tea', 'Filtered green tea', 2.50, 3)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO COFFEE (coffee_name, description, price, num_in_stock) VALUES ('Iced Coffee', 'Slow Brewed iced coffee', 3.50, 4)");
        stmt.executeUpdate();
        jlblStatus.setText("Coffee table created");
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_coffeeBtnActionPerformed

    private void ordersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersBtnActionPerformed
        // TODO add your handling code here:
         try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("CREATE TABLE ORDERS "
                                                               + "("
                                                                 + "order_id INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "customer_id INTEGER not null,"
                                                                 + "coffee_id INTEGER not null,"
                                                                 + "number_ordered DOUBLE not null,"
                                                                 + "total DOUBLE not null"
                                                                 + ")");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (1, 3, 2, 4)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (2, 2, 1, 3.99)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (3, 4, 3, 7.50)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (4, 5, 2, 7)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (5, 2, 4, 15.96)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (2, 4, 1, 2.50)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (3, 1, 1, 2.99)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (5, 2, 2, 7.98)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (1, 5, 1, 3.50)");
        stmt.executeUpdate();
        stmt=connection.prepareStatement("INSERT INTO ORDERS (customer_id, coffee_id, number_ordered, total) VALUES (2, 1, 3, 8.97)");
        stmt.executeUpdate();
        jlblStatus.setText("Order table created");
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_ordersBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        if(tableTxtBox.getText().equalsIgnoreCase("CUSTOMER")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE CUSTOMER");
        stmt.executeUpdate();
        stmt = connection.prepareStatement("CREATE TABLE CUSTOMER "
                                                               + "("
                                                                 + "customer_number INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "first_name VARCHAR(25) not null,"
                                                                 + "last_name VARCHAR(25) not null,"
                                                                 + "street VARCHAR(25) not null,"
                                                                 + "city VARCHAR(25) not null,"
                                                                 + "state VARCHAR(2) not null,"
                                                                + "zip VARCHAR(5) not null,"
                                                                + "phone VARCHAR(10) not null,"
                                                                + "email VARCHAR(25),"
                                                                + "credit_limit DOUBLE not null DEFAULT 0.00"
                                                                 + ")");
        stmt.executeUpdate();
        jlblStatus.setText("Customer table reset");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else if(tableTxtBox.getText().equalsIgnoreCase("COFFEE")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE COFFEE");
        stmt.executeUpdate();
        stmt = connection.prepareStatement("CREATE TABLE COFFEE "
                                                               + "("
                                                                 + "coffee_id INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "coffee_name VARCHAR(25) not null,"
                                                                 + "description VARCHAR(25) not null,"
                                                                 + "price DOUBLE not null,"
                                                                 + "num_in_stock INTEGER not null"
                                                                 + ")");
        stmt.executeUpdate();
        jlblStatus.setText("Coffee table reset");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else if(tableTxtBox.getText().equalsIgnoreCase("ORDERS")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE ORDERS");
        stmt.executeUpdate();
        stmt = connection.prepareStatement("CREATE TABLE ORDERS "
                                                               + "("
                                                                 + "order_id INT not null primary key GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
                                                                 + "customer_id INTEGER not null,"
                                                                 + "coffee_id INTEGER not null,"
                                                                 + "number_ordered DOUBLE not null,"
                                                                 + "total DOUBLE not null"
                                                                 + ")");
        stmt.executeUpdate();
        jlblStatus.setText("Order table reset");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else{
            jlblStatus.setText("Please enter a valid table name");
        }
    }//GEN-LAST:event_resetBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        if(tableTxtBox.getText().equalsIgnoreCase("ORDERS")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE ORDERS");
        stmt.executeUpdate();
        
        jlblStatus.setText("Order table deleted");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else if(tableTxtBox.getText().equalsIgnoreCase("COFFEE")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE COFFEE");
        stmt.executeUpdate();
        jlblStatus.setText("Coffee table deleted");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else if(tableTxtBox.getText().equalsIgnoreCase("CUSTOMER")){
            try{
        Connection connection = DriverManager.getConnection(database_URL, "me", "me");
        PreparedStatement stmt = connection.prepareStatement("DROP TABLE CUSTOMER");
        stmt.executeUpdate();
        jlblStatus.setText("Customer table deleted");
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        else{
            jlblStatus.setText("Please enter a valid table name");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void customerGUIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerGUIBtnActionPerformed
        // TODO add your handling code here:
        CustomerGUI cust = new CustomerGUI();
        cust.setVisible(true);
        cust.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_customerGUIBtnActionPerformed

    private void CoffeeGUIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoffeeGUIBtnActionPerformed
        // TODO add your handling code here:
        CoffeeGUI coff = new CoffeeGUI();
        coff.setVisible(true);
        coff.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_CoffeeGUIBtnActionPerformed

    private void ordersGUIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersGUIBtnActionPerformed
        // TODO add your handling code here:
        CustomerOrdersGUI custOrd = new CustomerOrdersGUI();
        custOrd.setVisible(true);
        custOrd.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_ordersGUIBtnActionPerformed

    private void NewCustGUIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewCustGUIBtnActionPerformed
        // TODO add your handling code here:
        NewCustomerGUI newCust = new NewCustomerGUI();
        newCust.setVisible(true);
        newCust.setLocationRelativeTo(null);
        dispose();
        
    }//GEN-LAST:event_NewCustGUIBtnActionPerformed

    private void newOrdersGUIBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrdersGUIBtnActionPerformed
        // TODO add your handling code here:
        NewOrderGUI newOrd = new NewOrderGUI();
        newOrd.setVisible(true);
        newOrd.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_newOrdersGUIBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreenGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreenGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreenGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreenGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreenGUI().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CoffeeGUIBtn;
    private javax.swing.JButton NewCustGUIBtn;
    private javax.swing.JButton coffeeBtn;
    private javax.swing.JButton customerBtn;
    private javax.swing.JButton customerGUIBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel jlblStatus;
    private javax.swing.JButton newOrdersGUIBtn;
    private javax.swing.JButton ordersBtn;
    private javax.swing.JButton ordersGUIBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextField tableTxtBox;
    // End of variables declaration//GEN-END:variables
}